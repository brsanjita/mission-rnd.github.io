<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
	<title>nodejs-intro</title>
	<meta content="PageBreeze Free HTML Editor (http://www.pagebreeze.com)" name="GENERATOR" />
	<meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type" />
</head>
<body bgcolor="#ffffff">
<h1 style="margin-left: 216pt">NodeJS Introduction &ndash; NodeJS 101</h1>

<p>&nbsp;</p>

<h1>Overview</h1>

<p>In this activity, you create a http server, which will support CRUD operations on Student's data. A file will be used as
a persistent storage for the student's data. </p>

<h2>PreRequisites</h2>

<p>&nbsp;</p>

<p>Projects you need to complete before trying this project:&nbsp; <a href="javascript-basics.htm">JS101</a></p>

<h1>Project Concepts</h1>

<h2>&nbsp;</h2>

<h2>What is nodeJS</h2>

<p>Node.js is a platform built on Chrome&#39;s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.</p>

<p>Node.js apps are developed using Javascript language. Node.js also provides additional JS APIs that can be used the node.js apps.</p>

<p>Node.js is most commonly used to build server applications, though it can also be used to build command-line tools as well as desktop UI applications (using node-webkit).</p>

<h2>File Persistence in nodeJS</h2>

<p>In this project, you will use the fs module provided by node.js to maintain a file storing student's data
	(student's id, firstName, lastName, gender and totalMarks). . You will also need to be able to read, update and
	delete a specific student.</p>

<p> You can enhance the student's FilePersistence module from javascript-async module&nbsp</p>

<p> Make http requests to your http server, to perform operation on the Students data. </p>

<a href="https://gist.github.com/krisnik/9a9866d7bfbcbc5baa05cf4e89d2728a">Sample http server to handle student's data.</a>

<p>In the above example, I have stored student's data in memory object. It perishes once the server is brought down.

In place of that, you can use the FilePersistence module developed in javascript-async lesson. </p>

<b> Sample code below..</b>

<table border="1" cellpadding="1" cellspacing="1" style="width: 500px">
	<caption>&nbsp;</caption>
	<tbody>
	<tr>
		<td>
			<p>var students = require("./FilePersistence.js") <br>// You can import your other js files using this notation</p>
			<p>//To create a student object upon receiving POST request </p><br>

			<p>//Parse the request body and get the student object. </p>
			<p>students.createStudent(student, function(err, data) { <br>
					if(err) { <br>
						//send response as 400 failed..<br>
					} else { <br>
						//send response as 200 OK <br>
					}
			</p>
		</td>
	</tr>
	</tbody>
</table>

</body>
</html>
